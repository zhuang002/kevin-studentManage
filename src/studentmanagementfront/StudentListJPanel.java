/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentmanagementfront;

import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultListModel;
import studentmanagementbackend.*;

/**
 *
 * @author Kevin
 */
public class StudentListJPanel extends ContentJPanel {

    /**
     * Creates new form StudentListJPanel
     */
    public StudentListJPanel()  {
        initComponents();
        
        try {
            this.studentJPanel1.setParentPanel((ContentJPanel)this);
            loadStudents();
            setState(PanelState.Initial);
        } catch (Exception e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        studentJPanel1 = new studentmanagementfront.StudentJPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListStudents = new javax.swing.JList<>();

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setRightComponent(studentJPanel1);

        jListStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListStudentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListStudents);

        jSplitPane1.setLeftComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jListStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListStudentsMouseClicked
        // TODO add your handling code here:
        onStudentSelected();
        
    }//GEN-LAST:event_jListStudentsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> jListStudents;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private studentmanagementfront.StudentJPanel studentJPanel1;
    // End of variables declaration//GEN-END:variables

    /**
     * Load all students from database to jList.
     */
    private void loadStudents()  {
        ArrayList<Student> students=Database.getAllStudents();
        Collections.sort(students);
        DefaultListModel listModel=new DefaultListModel();
        listModel.addAll(students);
        this.jListStudents.setModel(listModel);
    }

    /**
     *Override the setState() method to pass the state to child panel.
     * @param state the state to set. 
     */
    @Override
    public void setState(PanelState state) {
        this.studentJPanel1.setState(state);
    }

    /**
     *The handler to so something after the child panel has performed an action.
     * @param action The action that the child panel has just completed.
     * @param student the student parameter that has retrived from the child panel inputs.
     */
    public void actionCompleted(Action action, Student student)  {
        if (null != action) switch (action) {
            case New:
            case Update:{
                loadStudents();
                int idx=((DefaultListModel)this.jListStudents.getModel()).indexOf(student);
                //int idx=Collections.binarySearch(students, student, (x,y)->x.getId().compareTo(y.getId()));
                this.jListStudents.setSelectedIndex(idx);
                onStudentSelected();
                    break;
                }
            case Cancel:{
                int idx=this.jListStudents.getSelectedIndex();
                if (idx>=0)
                    onStudentSelected();
                else {
                    this.studentJPanel1.setState(PanelState.Initial);
                }       break;
                }
            case Delete:{
                int idx=this.jListStudents.getSelectedIndex();
                if (idx>=0) {
                    Student stud=(Student)((DefaultListModel)this.jListStudents.getModel()).get(idx);
                    stud.delete();
                    loadStudents();
                    this.studentJPanel1.clearAll();
                    this.studentJPanel1.setState(PanelState.Initial);
                }       break;
                }
            default:
                break;
        }
    }

    /**
     * The method to be called when a student is selected.
     */
    private void onStudentSelected() {
        int idx=this.jListStudents.getSelectedIndex();
        Student student=(Student)((DefaultListModel)this.jListStudents.getModel()).get(idx);
        this.studentJPanel1.setState(PanelState.InView);
        this.studentJPanel1.setData(student);
    }

    
}
